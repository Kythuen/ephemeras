import{_ as e,c as r,ae as d,o}from"./chunks/framework.UQ5cKqIc.js";const b=JSON.parse('{"title":"Types","description":"Type Definition of <code>@ephemeras/parser</code>.","frontmatter":{"title":"Types","description":"Type Definition of <code>@ephemeras/parser</code>."},"headers":[],"relativePath":"packages/parser/types.md","filePath":"packages/parser/types.md"}'),a={name:"packages/parser/types.md"};function i(s,t,n,c,h,l){return o(),r("div",null,t[0]||(t[0]=[d('<h3 id="baseoptions" tabindex="-1">BaseOptions <a class="header-anchor" href="#baseoptions" aria-label="Permalink to &quot;BaseOptions&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>context</td><td>string</td><td>Context directory.</td></tr><tr><td>relativize</td><td>boolean</td><td>Relativize the paths in result.</td></tr></tbody></table><h3 id="filteroptions" tabindex="-1">FilterOptions <a class="header-anchor" href="#filteroptions" aria-label="Permalink to &quot;FilterOptions&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>includes</td><td>string[]</td><td>Pattern matcher to include for operation.</td></tr><tr><td>excludes</td><td>string[]</td><td>Pattern matcher to exclude for operation.</td></tr><tr><td>filter</td><td>(src: string) =&gt; boolean</td><td>Filter by some condition for operation.<br>Return <code>true</code> to continue operation and <code>false</code> to skip it.</td></tr></tbody></table><h3 id="crosshookoptions" tabindex="-1">CrossHookOptions <a class="header-anchor" href="#crosshookoptions" aria-label="Permalink to &quot;CrossHookOptions&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>beforeEach</td><td>(src: string, dest: string) =&gt; any</td><td>Hook before each item been operated.</td></tr><tr><td>afterEach</td><td>(src: string, dest: string) =&gt; any</td><td>Hook after each item been operated.</td></tr></tbody></table><h3 id="crossoperationresult" tabindex="-1">CrossOperationResult <a class="header-anchor" href="#crossoperationresult" aria-label="Permalink to &quot;CrossOperationResult&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>src</td><td>string[]</td><td>Leaf items of source directory.</td></tr><tr><td>dest</td><td>string[]</td><td>Leaf items of destination directory.</td></tr><tr><td>add</td><td>string[]</td><td>Items which new add into destination directory.</td></tr><tr><td>update</td><td>string[]</td><td>Items which been overwrite in destination directory.</td></tr><tr><td>skip</td><td>string[]</td><td>Items which been skip in source directory.</td></tr></tbody></table><h3 id="parserpluginparams" tabindex="-1">ParserPluginParams <a class="header-anchor" href="#parserpluginparams" aria-label="Permalink to &quot;ParserPluginParams&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>files</td><td>Record&lt;string, string</td><td>Buffer</td></tr><tr><td>map</td><td>Record&lt;string, string&gt;</td><td>Filename map of source &amp; destination of File set.</td></tr><tr><td>parser</td><td>FileParser</td><td>Parser instance.</td></tr></tbody></table><h3 id="parseroptions" tabindex="-1">ParserOptions <a class="header-anchor" href="#parseroptions" aria-label="Permalink to &quot;ParserOptions&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>source</td><td>string</td><td>Source directory.</td></tr><tr><td>destination</td><td>string</td><td>Destination directory.</td></tr><tr><td>clean</td><td>boolean</td><td>Clear destination directory or not before operation.</td></tr><tr><td>overwrite</td><td>boolean</td><td>Overwrite existing file or directory.</td></tr><tr><td>plugins</td><td>ParserPlugin[]</td><td>Parser plugins. See plugins support.</td></tr><tr><td>context</td><td>string</td><td>Context directory.</td></tr><tr><td>relativize</td><td>boolean</td><td>Relativize the paths in result.</td></tr><tr><td>includes</td><td>string[]</td><td>Pattern matcher to include for operation.</td></tr><tr><td>excludes</td><td>string[]</td><td>Pattern matcher to exclude for operation.</td></tr><tr><td>filter</td><td>(src: string) =&gt; boolean</td><td>Filter by some condition for operation.\\nreturn <code>true</code> to continue operation and <code>false</code> to skip it.</td></tr><tr><td>beforeEach</td><td>(src: string, dest: string) =&gt; any</td><td>Hook before each item been operated.</td></tr><tr><td>afterEach</td><td>(src: string, dest: string) =&gt; any</td><td>Hook after each item been operated.</td></tr></tbody></table>',12)]))}const u=e(a,[["render",i]]);export{b as __pageData,u as default};
