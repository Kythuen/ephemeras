import{_ as s,c as i,ae as a,o as e}from"./chunks/framework.UQ5cKqIc.js";const c=JSON.parse('{"title":"@ephemeras/parser","description":"Parser template files with data.","frontmatter":{"title":"@ephemeras/parser","description":"Parser template files with data."},"headers":[],"relativePath":"packages/parser/index.md","filePath":"packages/parser/index.md"}'),r={name:"packages/parser/index.md"};function d(n,t,l,p,h,o){return e(),i("div",null,t[0]||(t[0]=[a(`<h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-rnAQg" id="tab-wlmcxiN" checked><label data-title="pnpm" for="tab-wlmcxiN">pnpm</label><input type="radio" name="group-rnAQg" id="tab-O-uS7YG"><label data-title="npm" for="tab-O-uS7YG">npm</label><input type="radio" name="group-rnAQg" id="tab-HTEWXZC"><label data-title="yarn" for="tab-HTEWXZC">yarn</label></div><div class="blocks"><div class="language-sh vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @ephemeras/parser</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @ephemeras/parser</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @ephemeras/parser</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div></div></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Parser, prettier } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ephemeras/parser&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  source: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TEST_DIR_SRC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  destination: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TEST_DIR_DEST</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">skip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="parser" tabindex="-1">Parser <a class="header-anchor" href="#parser" aria-label="Permalink to &quot;Parser&quot;">​</a></h2><p>To use <code>Parser</code>, you can easily to parse a template project.</p><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>source</td><td>string</td><td>Source directory.</td></tr><tr><td>destination</td><td>string</td><td>Destination directory.</td></tr><tr><td>clean</td><td>boolean</td><td>Clear destination directory or not before operation.</td></tr><tr><td>overwrite</td><td>boolean</td><td>Overwrite existing file or directory.</td></tr><tr><td>plugins</td><td>ParserPlugin[]</td><td>Parser plugins. See plugins support.</td></tr><tr><td>context</td><td>string</td><td>Context directory.</td></tr><tr><td>relativize</td><td>boolean</td><td>Relativize the paths in result.</td></tr><tr><td>includes</td><td>string[]</td><td>Pattern matcher to include for operation.</td></tr><tr><td>excludes</td><td>string[]</td><td>Pattern matcher to exclude for operation.</td></tr><tr><td>filter</td><td>(src: string) =&gt; boolean</td><td>Filter by some condition for operation.\\nreturn <code>true</code> to continue operation and <code>false</code> to skip it.</td></tr><tr><td>beforeEach</td><td>(src: string, dest: string) =&gt; any</td><td>Hook before each item been operated.</td></tr><tr><td>afterEach</td><td>(src: string, dest: string) =&gt; any</td><td>Hook after each item been operated.</td></tr></tbody></table><h3 id="result" tabindex="-1">Result <a class="header-anchor" href="#result" aria-label="Permalink to &quot;Result&quot;">​</a></h3><table tabindex="0"><thead><tr><th>value</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>src</td><td>string[]</td><td>Leaf items of source directory.</td></tr><tr><td>dest</td><td>string[]</td><td>Leaf items of destination directory.</td></tr><tr><td>add</td><td>string[]</td><td>Items which new add into destination directory.</td></tr><tr><td>update</td><td>string[]</td><td>Items which been overwrite in destination directory.</td></tr><tr><td>skip</td><td>string[]</td><td>Items which been skip in source directory.</td></tr></tbody></table><h2 id="fileparser" tabindex="-1">FileParser <a class="header-anchor" href="#fileparser" aria-label="Permalink to &quot;FileParser&quot;">​</a></h2><p>Sometimes, you only want to parse a single file, you can use <code>Parser</code> with options <code>includes</code> to filter the file wanted. Also we provide <code>FileParser</code> to do this directly.</p><h3 id="options-1" tabindex="-1">Options <a class="header-anchor" href="#options-1" aria-label="Permalink to &quot;Options&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>source</td><td>string</td><td>Source file.</td></tr><tr><td>destination</td><td>string</td><td>Destination file.</td></tr><tr><td>plugins</td><td>ParserPlugin[]</td><td>Parser plugins. See plugins support.</td></tr><tr><td>context</td><td>string</td><td>Context directory.</td></tr><tr><td>overwrite</td><td>boolean</td><td>Overwrite existing file or directory.</td></tr></tbody></table>`,14)]))}const g=s(r,[["render",d]]);export{c as __pageData,g as default};
