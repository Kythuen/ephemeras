import{_ as i,c as a,ae as t,o as n}from"./chunks/framework.UQ5cKqIc.js";const E=JSON.parse('{"title":"Plugins","description":"Plugins for template parser.","frontmatter":{"title":"Plugins","description":"Plugins for template parser."},"headers":[],"relativePath":"packages/parser/plugins.md","filePath":"packages/parser/plugins.md"}'),e={name:"packages/parser/plugins.md"};function p(h,s,l,r,k,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h3 id="nunjucks" tabindex="-1">Nunjucks <a class="header-anchor" href="#nunjucks" aria-label="Permalink to &quot;Nunjucks&quot;">​</a></h3><p><a href="https://mozilla.github.io/nunjucks/" target="_blank" rel="noreferrer">Nunjucks</a> is a rich and powerful templating language for JavaScript. To use <code>nunjucks</code> plugins in Parser, you can easily to compiler a project template with data.</p><h4 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h4><p><code>(data: Record&lt;string, any&gt; = {}, options?: Partial&lt;PluginOptions&gt;) =&gt; void</code></p><h4 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Parser, nunjucks } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ephemeras/parser&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  source: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TEST_DIR_SRC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  destination: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TEST_DIR_DEST</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nunjucks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;file1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">skip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="pluginoptions" tabindex="-1">PluginOptions <a class="header-anchor" href="#pluginoptions" aria-label="Permalink to &quot;PluginOptions&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>includes</td><td>string[]</td><td>Pattern matcher to include for operation.</td></tr><tr><td>excludes</td><td>string[]</td><td>Pattern matcher to exclude for operation.</td></tr><tr><td>filter</td><td>(src: string) =&gt; boolean</td><td>Filter by some condition for operation.\\nreturn <code>true</code> to continue operation and <code>false</code> to skip it.</td></tr></tbody></table><h3 id="prettier" tabindex="-1">Prettier <a class="header-anchor" href="#prettier" aria-label="Permalink to &quot;Prettier&quot;">​</a></h3><p><a href="https://prettier.io/" target="_blank" rel="noreferrer">Prettier</a> is a popular code formatter that aims to automate and enforce consistent code styling across JavaScript, TypeScript, Flow, CSS, SCSS, Less, HTML, JSON, Markdown, YAML, and other file types.</p><h4 id="types-1" tabindex="-1">Types <a class="header-anchor" href="#types-1" aria-label="Permalink to &quot;Types&quot;">​</a></h4><p><code>(options?: Partial&lt;PluginOptions&gt;) =&gt; Promise&lt;void&gt;</code></p><h4 id="usage-1" tabindex="-1">Usage <a class="header-anchor" href="#usage-1" aria-label="Permalink to &quot;Usage&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Parser, prettier } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ephemeras/parser&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  source: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TEST_DIR_SRC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  destination: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TEST_DIR_DEST</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prettier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">skip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="pluginoptions-1" tabindex="-1">PluginOptions <a class="header-anchor" href="#pluginoptions-1" aria-label="Permalink to &quot;PluginOptions&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>includes</td><td>string[]</td><td>Pattern matcher to include for operation.</td></tr><tr><td>excludes</td><td>string[]</td><td>Pattern matcher to exclude for operation.</td></tr><tr><td>filter</td><td>(src: string) =&gt; boolean</td><td>Filter by some condition for operation.<br>Return <code>true</code> to continue operation and <code>false</code> to skip it.</td></tr><tr><td>parsers</td><td>ParserMap</td><td>Prettier <code>extension-parser</code> map for files.</td></tr><tr><td>prettier</td><td>Record&lt;string, any&gt;</td><td>Prettier options.</td></tr></tbody></table>`,16)]))}const g=i(e,[["render",p]]);export{E as __pageData,g as default};
